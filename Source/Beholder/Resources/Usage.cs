/*
Copyright (c) 2010-2013 Beholder Project - Daniil Rodin

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

using System;

namespace Beholder.Resources
{
    /// <summary>
    /// Identifies expected resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the GPU.
    /// </summary>
    [Flags]
    public enum Usage : ushort
    {
        /// <summary>
        /// A resource that requires read and write access by the GPU. This is likely to be the most common usage choice.
        /// </summary>
        Default = 0,

        /// <summary>
        /// A resource that can only be read by the GPU. 
        /// It cannot be written by the GPU, and cannot be accessed at all by the CPU. 
        /// This type of resource must be initialized when it is created, since it cannot be changed after creation.
        /// </summary>
        Immutable = 1,

        /// <summary>
        /// A resource that is accessible by both the GPU (read only) and the CPU (write only). 
        /// A dynamic resource is a good choice for a resource that will be updated by the CPU at least once per frame.
        /// </summary>
        Dynamic = 2,

        /// <summary>
        /// A resorce that can be written by GPU and read by CPU.
        /// Use staging-read resources to read the data, generated by the GPU into the system memory without causing a pipeline stall.
        /// </summary>
        Staging = 3,
    }
}
